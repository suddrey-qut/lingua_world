#!/usr/bin/env python
import rospy
import json
import pymongo
import timeit
from geometry_msgs.msg import PoseStamped, Pose
from lingua_world.msg import WorldState
from sensor_msgs.msg import JointState

from lingua_world.srv import Assert, AssertResponse
from lingua_world.srv import FindObjects, FindObjectsResponse
from lingua_world.srv import GetObjectPose, GetObjectPoseResponse

from std_srvs.srv import Empty

import lingua_pddl as pddl
from lingua_kb.srv import Tell, TellRequest

def is_open(arg0):
  if arg0.startswith('g'):
    msg = rospy.wait_for_message('/franka_gripper/joint_states', JointState)
    return [arg0] if msg.position[0] > 0.035 and msg.position[1] > 0.035 else []
  return []

class World:
  def __init__(self):
    self.client = pymongo.MongoClient()
    self.db = self.client.lingua

    self.collection = self.db.objects

    self.sub_state = rospy.Subscriber('/world_state', WorldState, self.state_cb)

    self.srv_clear = rospy.Service('/lingua/world/clear', Empty, self.clear_cb)
    
    self.srv_pose = rospy.Service('/lingua/world/get_pose', GetObjectPose, self.get_pose_cb)

    self.kb_tell = rospy.ServiceProxy('/kb/tell', Tell)

    self.callbacks = {
      'on': lambda arg1, arg2: ['0'],
      'open': is_open
    }

    self.collection.remove({'transient': True})
  
  def state_cb(self, msg):
    self.collection.remove({'transient': True, 'time': {'$lt': timeit.default_timer() - 5}})
    print('Removed')
    for idx, entry in enumerate(msg.objects):
      entry = json.loads(entry)
      tag = 'o'

      if 'attributes' in entry:
        for attr in entry['attributes']:
          if attr['key'] == 'color':
            tag = attr['value'][0]
      entry['object_id'] = '{}_{}'.format(tag, idx)
      entry['time'] = timeit.default_timer()

      self.collection.replace_one({'object_id': entry['object_id']}, entry, upsert=True)
     
  def get_pose_cb(self, req):
    obj = self.collection.find_one({'object_id': req.object_id})
    
    if not obj:
      rospy.ServiceException('Unknown object with id: {}'.format(req.object_id))

    print(obj)
    data = obj['position']
    ps = PoseStamped()
    
    ps.header.frame_id = data['header']['frame_id']
    ps.header.stamp = rospy.Time.from_sec(data['header']['stamp'])

    ps.pose.position.x = data['pose']['position']['x']
    ps.pose.position.y = data['pose']['position']['y']
    ps.pose.position.z = data['pose']['position']['z']
    
    ps.pose.orientation.x = data['pose']['orientation']['x']
    ps.pose.orientation.y = data['pose']['orientation']['y']
    ps.pose.orientation.z = data['pose']['orientation']['z']
    ps.pose.orientation.w = data['pose']['orientation']['w']

    return GetObjectPoseResponse(pose_stamped=ps)

  def clear_cb(self, req):
    self.collection.delete_many({'transient': True})


def main():
  rospy.init_node('world_model')
  world = World()
  rospy.spin()

if __name__ == '__main__':
  main()